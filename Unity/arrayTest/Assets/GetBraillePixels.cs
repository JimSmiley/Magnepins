using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using System.Linq;
using System;
public class GetBraillePixels : MonoBehaviour  // This will get the center of each braille dotted in a correctly sized render texture.
{
    SerialInOut serialWrite;
    public RenderTexture rend;
    int stretch = 23;
     float yStretch = 25;
    //public bool TestRows;
    public int[] ignoreRows;
    public int[,] testString = { { 1,0,1,0,1,0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 }, { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 } };
    Texture2D texTwoD;
    MeshRenderer meshRend;
    public GameObject textObject;
    TextMeshPro textmesh;
    Color32[] pixels;
    int[,] thePhysicalArray;
    int row;
    int column;
    string alphabet = "lwoq";// "lowx"; //";"abcdefghijklmnopqrstuvwxyz";//"// 
    int count;
    int currentRow;
    public string textToWrite;
    public bool writeText;
    public bool testOnes;
    public bool testTwos;
    public bool testThrees;
    public bool ignoreOnes;
    public bool ignoreTwos;
    public bool ignoreThrees;
    public bool isBrailleSpacing;
    public bool invert;
    public bool checkerBoard;
    bool checkerStart;
    int checkerCount;
    
    void Start()
    {
        texTwoD = new Texture2D(2200, 600);
        meshRend = GetComponent<MeshRenderer>();
        thePhysicalArray = new int[96, 24];//[39, 12];
        serialWrite = GetComponent<SerialInOut>();
        textmesh = textObject.GetComponent < TextMeshPro >();
        
    }
    // Update is called once per frame
    void Update()
    {
        

         if (Input.GetKeyDown(KeyCode.Space))
        {
            checkerStart = !checkerStart; // to alternate
            char currentLetter = alphabet[count];
           // Debug.Log(currentLetter);
           if (count %2 ==0)
            {
                //invert = true;
            }
           else
            {
               // invert = false;
            }
           
            string s = new string(currentLetter, 192);
            if (!writeText)
            {
                textmesh.SetText(s);
            }
            else
            {
                textmesh.SetText(textToWrite);
            }
                
            if (count < alphabet.Length-1)
            {
                count++;
            }
            else
            {
                count = 0; 
            }
         
          meshRend.material.SetTexture("_MainTex", rend);
           
                GetPixels();
            
           
        }
         if (Input.GetKeyDown(KeyCode.DownArrow))
        {
            currentRow++;
            GetRows();
        }
        if (Input.GetKeyDown(KeyCode.UpArrow))
        {
            currentRow--;
            GetRows();
        }

    }

    void GetPixels()
    {
        if (ignoreOnes)
        {
            ignoreRows = new int[] { 2, 5, 8, 11, 14, 17, 20, 23, 26 };
        }
        if (ignoreTwos)
        {
            ignoreRows = new int[] { 1, 4, 7, 10, 13, 16, 19, 22, 25 };
           
        }
        if(ignoreThrees)
        {
            ignoreRows = new int[] { 0, 3, 6, 9, 12, 15, 18, 21, 24 };
        }
       if (testOnes )
        {
            testTwos = false;
            testThrees = false;
            
            ignoreRows = new int[]{0, 1, 4, 7, 10, 13, 16, 19, 22, 25, 3, 6, 9, 12, 15, 18, 21, 24};
        }
       else if (testTwos)
        {
            testOnes = false;
            testThrees = false;
            ignoreRows = new int[] { 0,2,5,8,14,17,20,23,26,11, 3, 6, 9, 12, 15, 18, 21, 24 };
        }
       else if (testThrees)
        {
            testOnes = false;
            testTwos = false;
            ignoreRows = new int[] { 2, 5, 8, 14, 17, 20, 23, 26,11, 1, 4, 7, 10, 13, 16, 19, 22, 25 };
        }
            RenderTexture.active = rend;
            texTwoD.ReadPixels(new Rect(0, 0, rend.width,rend.height), 0, 0);  //can't get pixel data from render texture, have to get it from a texture2D
            texTwoD.Apply();
           meshRend.material.SetTexture("_MainTex",texTwoD);
            row = 0;
            
        for (int j = rend.height - 8; j > 7; j -= (int)yStretch) // 8 and 7 are pixel offsets
        {
            bool invertChecker = checkerStart;
            
            column = 0;
            for (int i = 15; i < texTwoD.width; i += (int)stretch)
            {
                Color c;
                if (!checkerBoard)
                {
                    c = texTwoD.GetPixel(i, j, 0);
                }
                else
                {
                    if (invertChecker)
                    {
                        c = Color.black;
                    }
                    else
                    {
                         c = Color.white;
                    }
                    invertChecker = !invertChecker;
                }
                texTwoD.SetPixel(i, j, Color.red); // debug, draws dot at where it sampled pixel from
                texTwoD.SetPixel(i-1, j-1, Color.red);
                texTwoD.SetPixel(i+1, j+1, Color.red);

                if (c.r > 0.1 || ignoreRows.Contains(row))  // if White, or ignore rows
                {
                    thePhysicalArray[column, row] = 1;  // 
                    

                    if (ignoreRows.Contains(row))
                    {
                        thePhysicalArray[column, row] = 1;
                        
                    }

                }
                else
                {
                    
                        thePhysicalArray[column, row] = 0;
                        texTwoD.SetPixel(i, j, Color.green);
                    
                }
                    column++;
            }
                row++;
            invertChecker = !invertChecker;
        }
        texTwoD.Apply();
        if (!checkerBoard)
        {
            serialWrite.WriteSerial(thePhysicalArray, isBrailleSpacing);
        }

        else
        {
            serialWrite.WriteTestString(GetTestString(checkerCount));
            checkerCount++;
            if (checkerCount > 4)
            {
                checkerCount = 0;
            }
         }
        
        //Debug.Log(thePhysicalArray.ToString());
    }

    void GetRows()
    {
        for (int i = 0; i < thePhysicalArray.GetLength(0); i++ )
        {
            for (int j = 0; j< thePhysicalArray.GetLength(1); j++)
            {
                if (j == currentRow)
                {
                    thePhysicalArray[i, j] = 0;
                }
                else
                {
                    thePhysicalArray[i, j ]= 1;
                }
            }
        }
        serialWrite.WriteSerial(thePhysicalArray, isBrailleSpacing);
       
    }

    String GetTestString(int index)
    {
        string[] strings = new string[5];

        strings[0] = "t

        strings[1] = "t

        strings[2] = "t

        strings[3] = "t

      //  strings[4] = "t

        strings[4] = "t

        return strings[index];
    }
}
//t


